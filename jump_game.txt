int jump(int* nums, int n) {
    if (n == 1) {
        return 0; // Already at the last index
    }

    int jumps = 0;
    int currentEnd = 0;
    int farthest = 0;

    for (int i = 0; i < n - 1; i++) {
        farthest = std::max(farthest, i + nums[i]);

        if (i == currentEnd) {
            jumps++;
            currentEnd = farthest;

            if (currentEnd >= n - 1) {
                break; // Reached or exceeded the last index
            }
        }
    }

    return jumps;
}

int main() {
    // Example 1
    int nums1[] = { 2, 3, 1, 1, 4 };
    int n1 = sizeof(nums1) / sizeof(nums1[0]);
    std::cout << "Example 1: " << jump(nums1, n1) <<endl;

    // Example 2
    int nums2[] = { 2, 3, 0, 1, 4 };
    int n2 = sizeof(nums2) / sizeof(nums2[0]);
    std::cout << "Example 2: " << jump(nums2, n2) << endl;













    int arr[] = { 2,3,1,1,4 };
    int n = 5;
    int min = 1000;
    int store = 0;
    int index = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i; j < n; j++) {
            if (arr[i] >= j && j >= 0 && j + i < n) {
                if (min >arr[i]) {
                    min = arr[i];
                    index++;
                }
            }
        }
        break;
    }